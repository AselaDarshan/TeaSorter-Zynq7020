-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity embv_p1300c_v_tpg_0_0_v_tpg_MultiPixStream2AXIvideo is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    strmPix_V_val_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    strmPix_V_val_0_V_empty_n : IN STD_LOGIC;
    strmPix_V_val_0_V_read : OUT STD_LOGIC;
    strmPix_V_val_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    strmPix_V_val_1_V_empty_n : IN STD_LOGIC;
    strmPix_V_val_1_V_read : OUT STD_LOGIC;
    strmPix_V_val_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    strmPix_V_val_2_V_empty_n : IN STD_LOGIC;
    strmPix_V_val_2_V_read : OUT STD_LOGIC;
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC;
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    Height : IN STD_LOGIC_VECTOR (15 downto 0);
    WidthOut : IN STD_LOGIC_VECTOR (15 downto 0);
    colorFormat : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of embv_p1300c_v_tpg_0_0_v_tpg_MultiPixStream2AXIvideo is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_pp0_stg0_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_25 : BOOLEAN;
    signal mapComp_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mapComp_ce0 : STD_LOGIC;
    signal mapComp_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_232 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_bdd_70 : BOOLEAN;
    signal grp_v_tpg_reg_unsigned_short_s_fu_243_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_498 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_82 : BOOLEAN;
    signal grp_v_tpg_reg_unsigned_short_s_fu_243_ap_done : STD_LOGIC;
    signal grp_v_tpg_reg_unsigned_short_s_fu_249_ap_done : STD_LOGIC;
    signal tmp_126_fu_255_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_126_reg_503 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_27_fu_275_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_fu_287_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_517 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_102 : BOOLEAN;
    signal exitcond1_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_129_fu_307_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_129_reg_534 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_109_fu_310_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_109_reg_539 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_130_fu_315_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_130_reg_544 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_131_fu_319_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_131_reg_549 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_132_fu_323_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_132_reg_554 : STD_LOGIC_VECTOR (1 downto 0);
    signal map_2_V_1_fu_356_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_129 : BOOLEAN;
    signal map_2_V_3_fu_372_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal map_2_V_5_fu_380_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond2_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_142 : BOOLEAN;
    signal i_2_fu_397_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_2_reg_578 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond3_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_reg_583 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_153 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal strmPix_V_val_0_V0_status : STD_LOGIC;
    signal ap_sig_bdd_161 : BOOLEAN;
    signal ap_sig_ioackin_m_axis_video_TREADY : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal j_1_fu_412_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal axi_last_V_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_reg_592 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_v_tpg_reg_unsigned_short_s_fu_243_ap_start : STD_LOGIC;
    signal grp_v_tpg_reg_unsigned_short_s_fu_243_ap_idle : STD_LOGIC;
    signal grp_v_tpg_reg_unsigned_short_s_fu_243_ap_ready : STD_LOGIC;
    signal grp_v_tpg_reg_unsigned_short_s_fu_243_in_r : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_v_tpg_reg_unsigned_short_s_fu_249_ap_start : STD_LOGIC;
    signal grp_v_tpg_reg_unsigned_short_s_fu_249_ap_idle : STD_LOGIC;
    signal grp_v_tpg_reg_unsigned_short_s_fu_249_ap_ready : STD_LOGIC;
    signal grp_v_tpg_reg_unsigned_short_s_fu_249_in_r : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_v_tpg_reg_unsigned_short_s_fu_249_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal map_V_2_s_reg_173 : STD_LOGIC_VECTOR (3 downto 0);
    signal map_V_1_s_reg_185 : STD_LOGIC_VECTOR (3 downto 0);
    signal map_2_V_4_reg_197 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_209 : STD_LOGIC_VECTOR (1 downto 0);
    signal i1_reg_221 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_v_tpg_reg_unsigned_short_s_fu_243_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_v_tpg_reg_unsigned_short_s_fu_249_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_28_cast_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal strmPix_V_val_0_V0_update : STD_LOGIC;
    signal tmp_user_V_fu_100 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ioackin_m_axis_video_TREADY : STD_LOGIC := '0';
    signal tmp_128_fu_263_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl_cast_fu_267_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_127_fu_259_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_112_cast_fu_293_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_28_fu_297_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sel_tmp_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal map_0_V_cast_fu_332_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sel_tmp2_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal map_2_V_fu_342_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal map_2_V_2_fu_364_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i1_cast_fu_388_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_cast_fu_403_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_21_fu_461_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_450_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_439_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component embv_p1300c_v_tpg_0_0_v_tpg_reg_unsigned_short_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component embv_p1300c_v_tpg_0_0_v_tpg_mux_3to1_sel2_8_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component embv_p1300c_v_tpg_0_0_v_tpg_MultiPixStream2AXIvideo_mapComp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;



begin
    mapComp_U : component embv_p1300c_v_tpg_0_0_v_tpg_MultiPixStream2AXIvideo_mapComp
    generic map (
        DataWidth => 2,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mapComp_address0,
        ce0 => mapComp_ce0,
        q0 => mapComp_q0);

    grp_v_tpg_reg_unsigned_short_s_fu_243 : component embv_p1300c_v_tpg_0_0_v_tpg_reg_unsigned_short_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_v_tpg_reg_unsigned_short_s_fu_243_ap_start,
        ap_done => grp_v_tpg_reg_unsigned_short_s_fu_243_ap_done,
        ap_idle => grp_v_tpg_reg_unsigned_short_s_fu_243_ap_idle,
        ap_ready => grp_v_tpg_reg_unsigned_short_s_fu_243_ap_ready,
        in_r => grp_v_tpg_reg_unsigned_short_s_fu_243_in_r,
        ap_return => grp_v_tpg_reg_unsigned_short_s_fu_243_ap_return);

    grp_v_tpg_reg_unsigned_short_s_fu_249 : component embv_p1300c_v_tpg_0_0_v_tpg_reg_unsigned_short_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_v_tpg_reg_unsigned_short_s_fu_249_ap_start,
        ap_done => grp_v_tpg_reg_unsigned_short_s_fu_249_ap_done,
        ap_idle => grp_v_tpg_reg_unsigned_short_s_fu_249_ap_idle,
        ap_ready => grp_v_tpg_reg_unsigned_short_s_fu_249_ap_ready,
        in_r => grp_v_tpg_reg_unsigned_short_s_fu_249_in_r,
        ap_return => grp_v_tpg_reg_unsigned_short_s_fu_249_ap_return);

    v_tpg_mux_3to1_sel2_8_1_U138 : component embv_p1300c_v_tpg_0_0_v_tpg_mux_3to1_sel2_8_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din1 => strmPix_V_val_0_V_dout,
        din2 => strmPix_V_val_1_V_dout,
        din3 => strmPix_V_val_2_V_dout,
        din4 => tmp_130_reg_544,
        dout => tmp_19_fu_439_p5);

    v_tpg_mux_3to1_sel2_8_1_U139 : component embv_p1300c_v_tpg_0_0_v_tpg_mux_3to1_sel2_8_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din1 => strmPix_V_val_0_V_dout,
        din2 => strmPix_V_val_1_V_dout,
        din3 => strmPix_V_val_2_V_dout,
        din4 => tmp_131_reg_549,
        dout => tmp_20_fu_450_p5);

    v_tpg_mux_3to1_sel2_8_1_U140 : component embv_p1300c_v_tpg_0_0_v_tpg_mux_3to1_sel2_8_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din1 => strmPix_V_val_0_V_dout,
        din2 => strmPix_V_val_1_V_dout,
        din3 => strmPix_V_val_2_V_dout,
        din4 => tmp_132_reg_554,
        dout => tmp_21_fu_461_p5);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond2_fu_392_p2)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_axis_video_TREADY assign process. --
    ap_reg_ioackin_m_axis_video_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axis_video_TREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_lv1_0 = exitcond3_reg_583) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_161 or ((ap_const_lv1_0 = exitcond3_reg_583) and (ap_const_logic_0 = ap_sig_ioackin_m_axis_video_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then 
                    ap_reg_ioackin_m_axis_video_TREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_lv1_0 = exitcond3_reg_583) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_161 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_logic_1 = m_axis_video_TREADY)))) then 
                    ap_reg_ioackin_m_axis_video_TREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not(((ap_sig_bdd_161 or ((ap_const_lv1_0 = exitcond3_reg_583) and (ap_const_logic_0 = ap_sig_ioackin_m_axis_video_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond3_fu_407_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond2_fu_392_p2))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not(((ap_sig_bdd_161 or ((ap_const_lv1_0 = exitcond3_reg_583) and (ap_const_logic_0 = ap_sig_ioackin_m_axis_video_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond3_fu_407_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond2_fu_392_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not(((ap_sig_bdd_161 or ((ap_const_lv1_0 = exitcond3_reg_583) and (ap_const_logic_0 = ap_sig_ioackin_m_axis_video_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond3_fu_407_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_v_tpg_reg_unsigned_short_s_fu_243_ap_start_ap_start_reg assign process. --
    grp_v_tpg_reg_unsigned_short_s_fu_243_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_v_tpg_reg_unsigned_short_s_fu_243_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_70))) then 
                    grp_v_tpg_reg_unsigned_short_s_fu_243_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_v_tpg_reg_unsigned_short_s_fu_243_ap_ready)) then 
                    grp_v_tpg_reg_unsigned_short_s_fu_243_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_v_tpg_reg_unsigned_short_s_fu_249_ap_start_ap_start_reg assign process. --
    grp_v_tpg_reg_unsigned_short_s_fu_249_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_v_tpg_reg_unsigned_short_s_fu_249_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_70))) then 
                    grp_v_tpg_reg_unsigned_short_s_fu_249_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_v_tpg_reg_unsigned_short_s_fu_249_ap_ready)) then 
                    grp_v_tpg_reg_unsigned_short_s_fu_249_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i1_reg_221 assign process. --
    i1_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_161 or ((ap_const_lv1_0 = exitcond3_reg_583) and (ap_const_logic_0 = ap_sig_ioackin_m_axis_video_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond3_fu_407_p2)))) then 
                i1_reg_221 <= i_2_reg_578;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond1_fu_281_p2 = ap_const_lv1_0)))) then 
                i1_reg_221 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- i_reg_209 assign process. --
    i_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                i_reg_209 <= i_1_reg_517;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(((ap_const_logic_0 = grp_v_tpg_reg_unsigned_short_s_fu_243_ap_done) or (ap_const_logic_0 = grp_v_tpg_reg_unsigned_short_s_fu_249_ap_done))))) then 
                i_reg_209 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    -- j_reg_232 assign process. --
    j_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond2_fu_392_p2))) then 
                j_reg_232 <= ap_const_lv11_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_161 or ((ap_const_lv1_0 = exitcond3_reg_583) and (ap_const_logic_0 = ap_sig_ioackin_m_axis_video_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond3_fu_407_p2))) then 
                j_reg_232 <= j_1_fu_412_p2;
            end if; 
        end if;
    end process;

    -- tmp_user_V_fu_100 assign process. --
    tmp_user_V_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_lv1_0 = exitcond3_reg_583) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_161 or ((ap_const_lv1_0 = exitcond3_reg_583) and (ap_const_logic_0 = ap_sig_ioackin_m_axis_video_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                tmp_user_V_fu_100 <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond1_fu_281_p2 = ap_const_lv1_0)))) then 
                tmp_user_V_fu_100 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not(((ap_sig_bdd_161 or ((ap_const_lv1_0 = exitcond3_reg_583) and (ap_const_logic_0 = ap_sig_ioackin_m_axis_video_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond3_fu_407_p2))) then
                axi_last_V_reg_592 <= axi_last_V_fu_418_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and not(((ap_sig_bdd_161 or ((ap_const_lv1_0 = exitcond3_reg_583) and (ap_const_logic_0 = ap_sig_ioackin_m_axis_video_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                exitcond3_reg_583 <= exitcond3_fu_407_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                i_1_reg_517 <= i_1_fu_287_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                i_2_reg_578 <= i_2_fu_397_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                map_2_V_4_reg_197 <= map_2_V_5_fu_380_p3;
                map_V_1_s_reg_185 <= map_2_V_3_fu_372_p3;
                map_V_2_s_reg_173 <= map_2_V_1_fu_356_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond1_fu_281_p2 = ap_const_lv1_0)))) then
                tmp_109_reg_539 <= tmp_109_fu_310_p2;
                tmp_129_reg_534 <= tmp_129_fu_307_p1;
                tmp_130_reg_544 <= tmp_130_fu_315_p1;
                tmp_131_reg_549 <= tmp_131_fu_319_p1;
                tmp_132_reg_554 <= tmp_132_fu_323_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(((ap_const_logic_0 = grp_v_tpg_reg_unsigned_short_s_fu_243_ap_done) or (ap_const_logic_0 = grp_v_tpg_reg_unsigned_short_s_fu_249_ap_done))))) then
                tmp_126_reg_503 <= tmp_126_fu_255_p1;
                tmp_reg_498 <= grp_v_tpg_reg_unsigned_short_s_fu_243_ap_return;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_70, grp_v_tpg_reg_unsigned_short_s_fu_243_ap_done, grp_v_tpg_reg_unsigned_short_s_fu_249_ap_done, exitcond1_fu_281_p2, exitcond2_fu_392_p2, exitcond3_fu_407_p2, exitcond3_reg_583, ap_reg_ppiten_pp0_it0, ap_sig_bdd_161, ap_sig_ioackin_m_axis_video_TREADY, ap_reg_ppiten_pp0_it1)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_70)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not(((ap_const_logic_0 = grp_v_tpg_reg_unsigned_short_s_fu_243_ap_done) or (ap_const_logic_0 = grp_v_tpg_reg_unsigned_short_s_fu_249_ap_done)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((exitcond1_fu_281_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_392_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_5;
                end if;
            when ap_ST_pp0_stg0_fsm_5 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_161 or ((ap_const_lv1_0 = exitcond3_reg_583) and (ap_const_logic_0 = ap_sig_ioackin_m_axis_video_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond3_fu_407_p2))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_5;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_161 or ((ap_const_lv1_0 = exitcond3_reg_583) and (ap_const_logic_0 = ap_sig_ioackin_m_axis_video_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond3_fu_407_p2)))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, exitcond2_fu_392_p2, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond2_fu_392_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(exitcond2_fu_392_p2, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond2_fu_392_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_102 assign process. --
    ap_sig_bdd_102_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_102 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_129 assign process. --
    ap_sig_bdd_129_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_129 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_142 assign process. --
    ap_sig_bdd_142_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_142 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_153 assign process. --
    ap_sig_bdd_153_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_153 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_161 assign process. --
    ap_sig_bdd_161_assign_proc : process(exitcond3_reg_583, strmPix_V_val_0_V0_status)
    begin
                ap_sig_bdd_161 <= ((strmPix_V_val_0_V0_status = ap_const_logic_0) and (ap_const_lv1_0 = exitcond3_reg_583));
    end process;


    -- ap_sig_bdd_25 assign process. --
    ap_sig_bdd_25_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_25 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_70 assign process. --
    ap_sig_bdd_70_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_70 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_82 assign process. --
    ap_sig_bdd_82_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_82 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_5 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_5_assign_proc : process(ap_sig_bdd_153)
    begin
        if (ap_sig_bdd_153) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_25)
    begin
        if (ap_sig_bdd_25) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_82)
    begin
        if (ap_sig_bdd_82) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_102)
    begin
        if (ap_sig_bdd_102) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_129)
    begin
        if (ap_sig_bdd_129) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_142)
    begin
        if (ap_sig_bdd_142) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_m_axis_video_TREADY assign process. --
    ap_sig_ioackin_m_axis_video_TREADY_assign_proc : process(m_axis_video_TREADY, ap_reg_ioackin_m_axis_video_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axis_video_TREADY)) then 
            ap_sig_ioackin_m_axis_video_TREADY <= m_axis_video_TREADY;
        else 
            ap_sig_ioackin_m_axis_video_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    axi_last_V_fu_418_p2 <= "1" when (j_cast_fu_403_p1 = tmp_109_reg_539) else "0";
    exitcond1_fu_281_p2 <= "1" when (i_reg_209 = ap_const_lv2_3) else "0";
    exitcond2_fu_392_p2 <= "1" when (i1_cast_fu_388_p1 = tmp_129_reg_534) else "0";
    exitcond3_fu_407_p2 <= "1" when (j_cast_fu_403_p1 = tmp_126_reg_503) else "0";
    grp_v_tpg_reg_unsigned_short_s_fu_243_ap_start <= grp_v_tpg_reg_unsigned_short_s_fu_243_ap_start_ap_start_reg;
    grp_v_tpg_reg_unsigned_short_s_fu_243_in_r <= Height;
    grp_v_tpg_reg_unsigned_short_s_fu_249_ap_start <= grp_v_tpg_reg_unsigned_short_s_fu_249_ap_start_ap_start_reg;
    grp_v_tpg_reg_unsigned_short_s_fu_249_in_r <= WidthOut;
    i1_cast_fu_388_p1 <= std_logic_vector(resize(unsigned(i1_reg_221),12));
    i_1_fu_287_p2 <= std_logic_vector(unsigned(i_reg_209) + unsigned(ap_const_lv2_1));
    i_2_fu_397_p2 <= std_logic_vector(unsigned(i1_reg_221) + unsigned(ap_const_lv11_1));
    j_1_fu_412_p2 <= std_logic_vector(unsigned(j_reg_232) + unsigned(ap_const_lv11_1));
    j_cast_fu_403_p1 <= std_logic_vector(resize(unsigned(j_reg_232),12));
    m_axis_video_TDATA <= ((tmp_21_fu_461_p5 & tmp_20_fu_450_p5) & tmp_19_fu_439_p5);
    m_axis_video_TDEST <= ap_const_lv1_0;
    m_axis_video_TID <= ap_const_lv1_0;
    m_axis_video_TKEEP <= ap_const_lv3_7;
    m_axis_video_TLAST <= axi_last_V_reg_592;
    m_axis_video_TSTRB <= ap_const_lv3_0;
    m_axis_video_TUSER <= tmp_user_V_fu_100;

    -- m_axis_video_TVALID assign process. --
    m_axis_video_TVALID_assign_proc : process(exitcond3_reg_583, ap_sig_cseq_ST_pp0_stg0_fsm_5, ap_sig_bdd_161, ap_reg_ppiten_pp0_it1, ap_reg_ioackin_m_axis_video_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_lv1_0 = exitcond3_reg_583) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_161 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_logic_0 = ap_reg_ioackin_m_axis_video_TREADY)))) then 
            m_axis_video_TVALID <= ap_const_logic_1;
        else 
            m_axis_video_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    mapComp_address0 <= tmp_28_cast_fu_302_p1(4 - 1 downto 0);

    -- mapComp_ce0 assign process. --
    mapComp_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            mapComp_ce0 <= ap_const_logic_1;
        else 
            mapComp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    map_0_V_cast_fu_332_p1 <= std_logic_vector(resize(unsigned(mapComp_q0),4));
    map_2_V_1_fu_356_p3 <= 
        map_V_2_s_reg_173 when (sel_tmp2_fu_350_p2(0) = '1') else 
        map_2_V_fu_342_p3;
    map_2_V_2_fu_364_p3 <= 
        map_0_V_cast_fu_332_p1 when (sel_tmp_fu_336_p2(0) = '1') else 
        map_V_1_s_reg_185;
    map_2_V_3_fu_372_p3 <= 
        map_V_1_s_reg_185 when (sel_tmp2_fu_350_p2(0) = '1') else 
        map_2_V_2_fu_364_p3;
    map_2_V_5_fu_380_p3 <= 
        map_0_V_cast_fu_332_p1 when (sel_tmp2_fu_350_p2(0) = '1') else 
        map_2_V_4_reg_197;
    map_2_V_fu_342_p3 <= 
        map_V_2_s_reg_173 when (sel_tmp_fu_336_p2(0) = '1') else 
        map_0_V_cast_fu_332_p1;
    p_shl_cast_fu_267_p3 <= (tmp_128_fu_263_p1 & ap_const_lv2_0);
    sel_tmp2_fu_350_p2 <= "1" when (i_reg_209 = ap_const_lv2_0) else "0";
    sel_tmp_fu_336_p2 <= "1" when (i_reg_209 = ap_const_lv2_1) else "0";
    strmPix_V_val_0_V0_status <= (strmPix_V_val_0_V_empty_n and strmPix_V_val_1_V_empty_n and strmPix_V_val_2_V_empty_n);

    -- strmPix_V_val_0_V0_update assign process. --
    strmPix_V_val_0_V0_update_assign_proc : process(exitcond3_reg_583, ap_sig_cseq_ST_pp0_stg0_fsm_5, ap_sig_bdd_161, ap_sig_ioackin_m_axis_video_TREADY, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_5) and (ap_const_lv1_0 = exitcond3_reg_583) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_161 or ((ap_const_lv1_0 = exitcond3_reg_583) and (ap_const_logic_0 = ap_sig_ioackin_m_axis_video_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            strmPix_V_val_0_V0_update <= ap_const_logic_1;
        else 
            strmPix_V_val_0_V0_update <= ap_const_logic_0;
        end if; 
    end process;

    strmPix_V_val_0_V_read <= strmPix_V_val_0_V0_update;
    strmPix_V_val_1_V_read <= strmPix_V_val_0_V0_update;
    strmPix_V_val_2_V_read <= strmPix_V_val_0_V0_update;
    tmp_109_fu_310_p2 <= std_logic_vector(signed(ap_const_lv12_FFF) + signed(tmp_126_reg_503));
    tmp_112_cast_fu_293_p1 <= std_logic_vector(resize(unsigned(i_reg_209),5));
    tmp_126_fu_255_p1 <= grp_v_tpg_reg_unsigned_short_s_fu_249_ap_return(12 - 1 downto 0);
    tmp_127_fu_259_p1 <= colorFormat(5 - 1 downto 0);
    tmp_128_fu_263_p1 <= colorFormat(3 - 1 downto 0);
    tmp_129_fu_307_p1 <= tmp_reg_498(12 - 1 downto 0);
    tmp_130_fu_315_p1 <= map_2_V_4_reg_197(2 - 1 downto 0);
    tmp_131_fu_319_p1 <= map_V_1_s_reg_185(2 - 1 downto 0);
    tmp_132_fu_323_p1 <= map_V_2_s_reg_173(2 - 1 downto 0);
    tmp_27_fu_275_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_267_p3) - unsigned(tmp_127_fu_259_p1));
        tmp_28_cast_fu_302_p1 <= std_logic_vector(resize(signed(tmp_28_fu_297_p2),64));

    tmp_28_fu_297_p2 <= std_logic_vector(unsigned(tmp_27_fu_275_p2) + unsigned(tmp_112_cast_fu_293_p1));
end behav;
